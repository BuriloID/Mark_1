
from flask import Flask, render_template, request, redirect, url_for, session, jsonify, make_response
from flask_sqlalchemy import SQLAlchemy 
from flask_cors import CORS
import telegram, time
import asyncio
import hashlib
import json
import requests
from sqlalchemy import or_
app = Flask(__name__)
CORS(app)
CDEK_ACCOUNT = '—Ç–≤–æ–π_account'
CDEK_SECURE = '—Ç–≤–æ–π_secure_key'
@app.route('/service', methods=['POST'])
def cdek_service():
    req_data = request.get_json()
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è security hash
    secure = hashlib.md5(f"{CDEK_ACCOUNT}&{CDEK_SECURE}".encode()).hexdigest()
    headers = {
        "Content-Type": "application/json"
    }
    payload = {
        "account": CDEK_ACCOUNT,
        "secure": secure,
        "date": time.strftime("%Y-%m-%d %H:%M:%S"),
        **req_data
    }
    # –ó–∞–ø—Ä–æ—Å –∫ –°–î–≠–ö
    response = requests.post(
        "https://widget.cdek.ru/widget/scripts/service.php",
        headers=headers,
        data=json.dumps(payload)
    )
    return jsonify(response.json())
# –ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
TOKEN = '7879922019:AAFKrDUzrPBAUqbZN0BudsTySC3C1g3MelY'
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —á–∞—Ç ID
CHAT_ID = 5208308918
bot = telegram.Bot(token=TOKEN)
def send_message_sync(chat_id, text):
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    return loop.run_until_complete(bot.send_message(chat_id=chat_id, text=text))
@app.route('/buy', methods=['POST'])
def buy():
    size = request.form.get('selectedSize')  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    first_name = request.form.get('firstName')
    last_name = request.form.get('lastName')
    middle_name = request.form.get('middleName')
    phone = request.form.get('phone')
    email = request.form.get('email')
    print(f"–†–∞–∑–º–µ—Ä: {size}")
    # –î–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
    product_name = request.form.get('product_name')
    product_price = request.form.get('product_price')
    product_descriptions = request.form.get('product_description')
    product_url = request.form.get('product_url')
    # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    cart_items = request.form.getlist('cart_items')
    cart_descriptions = request.form.getlist('cart_item_description')
    cart_prices = request.form.getlist('cart_item_price')
    cart_quantities = request.form.getlist('cart_item_quantity')
    message = f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\nüë§ –ò–º—è: {first_name}\nüë§ –§–∞–º–∏–ª–∏—è: {last_name}\nüë§ –û—Ç—á–µ—Å—Ç–≤–æ: {middle_name if middle_name else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüìß Email: {email}\n"
    if cart_items:
        cart_total = 0
        message += "üì¶ –¢–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:\n"
        for name, price, quantity, description in zip(cart_items, cart_prices, cart_quantities, cart_descriptions):
            message += f"- {name} ({description}): {price} ‚ÇΩ x {quantity}\n"
            cart_total += float(price) * int(quantity)
        message += f"\nüí∞ –ò—Ç–æ–≥–æ –∑–∞ –∫–æ—Ä–∑–∏–Ω—É: {cart_total} ‚ÇΩ\n"
    elif product_name:
        message += f"üì¶ –¢–æ–≤–∞—Ä: {product_name} ({product_descriptions})\nüí∞ –¶–µ–Ω–∞: {product_price} ‚ÇΩ\nüîó –°—Å—ã–ª–∫–∞: {product_url}\n"
    if size:
        message += f"üìè –†–∞–∑–º–µ—Ä: {size}\n"
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        send_message_sync(CHAT_ID, message)
        return jsonify({'status': 'success', 'message': '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'}), 200
    except Exception as e:
        return jsonify({'status': 'error', 'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}'}), 500
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///product.db'  # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
app.config['SECRET_KEY'] = 'supersecretkey'  # –ö–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Å—Å–∏–π
db = SQLAlchemy(app)
# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–≤—è–∑–∏ "–ú–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º" –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
product_category = db.Table('product_category',
                            db.Column('product_id', db.Integer, db.ForeignKey('product.id'), primary_key=True),
                            db.Column('category_id', db.Integer, db.ForeignKey('category.id'), primary_key=True)
                            )
new_product_category = db.Table('new_product_category',
                                db.Column('new_product_id', db.Integer, db.ForeignKey('new_product.id'),
                                          primary_key=True),
                                db.Column('category_id', db.Integer, db.ForeignKey('category.id'), primary_key=True)
                                )
# –ú–æ–¥–µ–ª—å –ö–∞—Ç–µ–≥–æ—Ä–∏–π
class Category(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), unique=True, nullable=False)  # 'men', 'women', 'acs'

    def __repr__(self):
        return f'<Category {self.name}>'
# –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä
class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500), nullable=True)
    price = db.Column(db.Float, nullable=False)
    image_url = db.Column(db.String(500), nullable=True)
    image_url_back = db.Column(db.String(500), nullable=True)
    sale = db.Column(db.Integer, default=0)  # –ü–æ–ª–µ –¥–ª—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏
    # –°–≤—è–∑—å –º–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    categories = db.relationship('Category', secondary=product_category, backref='products')
    details = db.relationship('ProductDetails', backref='product', lazy=True)
    def __repr__(self):
        return f'<Product {self.name}>'
# –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (–µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å Product)
class NewProduct(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500), nullable=True)
    price = db.Column(db.Float, nullable=False)
    image_url = db.Column(db.String(500), nullable=True)
    image_url_back = db.Column(db.String(500), nullable=True)
    # –°–≤—è–∑—å –º–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    categories = db.relationship('Category', secondary=new_product_category, backref='new_products')
    details = db.relationship('ProductDetails', backref='new_product', lazy=True)
    def __repr__(self):
        return f'<NewProduct {self.name}>'
# –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞ (—Å–≤—è–∑–∞–Ω—ã –∏ —Å Product, –∏ —Å NewProduct)
class ProductDetails(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=True)
    new_product_id = db.Column(db.Integer, db.ForeignKey('new_product.id'), nullable=True)
    full_description = db.Column(db.Text, nullable=True)
    composition = db.Column(db.Text, nullable=True)
    size = db.Column(db.Text, nullable=True)
    extra_image1 = db.Column(db.String(500), nullable=True)
    extra_image2 = db.Column(db.String(500), nullable=True)
    extra_image3 = db.Column(db.String(500), nullable=True)
    extra_image4 = db.Column(db.String(500), nullable=True)
    extra_image5 = db.Column(db.String(500), nullable=True)
    extra_image6 = db.Column(db.String(500), nullable=True)
    def __repr__(self):
        return f'<ProductDetails {self.id}>'
class Collection(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    # 12 –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –Ω–∞ —Ç–∞–±–ª–∏—Ü—É Product
    id_1 = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=True)
    id_2 = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=True)
    id_3 = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=True)
    id_4 = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=True)
    id_5 = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=True)
    id_6 = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=True)
    id_7 = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=True)
    id_8 = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=True)
    id_9 = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=True)
    id_10 = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=True)
    id_11 = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=True)
    id_12 = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=True)
    # –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    col_description = db.Column(db.Text, nullable=True)
    col_image = db.Column(db.String(255), nullable=True)
    # –°–≤—è–∑–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ Product
    product_1 = db.relationship('Product', foreign_keys=[id_1])
    product_2 = db.relationship('Product', foreign_keys=[id_2])
    product_3 = db.relationship('Product', foreign_keys=[id_3])
    product_4 = db.relationship('Product', foreign_keys=[id_4])
    product_5 = db.relationship('Product', foreign_keys=[id_5])
    product_6 = db.relationship('Product', foreign_keys=[id_6])
    product_7 = db.relationship('Product', foreign_keys=[id_7])
    product_8 = db.relationship('Product', foreign_keys=[id_8])
    product_9 = db.relationship('Product', foreign_keys=[id_9])
    product_10 = db.relationship('Product', foreign_keys=[id_10])
    product_11 = db.relationship('Product', foreign_keys=[id_11])
    product_12 = db.relationship('Product', foreign_keys=[id_12])
@app.route('/collection/<int:collection_id>')
def show_collection(collection_id):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ ID
    collection = Collection.query.get_or_404(collection_id)
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∏—Å–∫–ª—é—á–∞—è None (–µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é)
    products = [
        collection.product_1,
        collection.product_2,
        collection.product_3,
        collection.product_4,
        collection.product_5,
        collection.product_6,
        collection.product_7,
        collection.product_8,
        collection.product_9,
        collection.product_10,
        collection.product_11,
        collection.product_12
    ]
    products = [product for product in products if product is not None]
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
    return render_template('collection.html', collection=collection, products=products)
class CollectionTable(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    id_col = db.Column(db.Integer, db.ForeignKey('collection.id'), nullable=False)
    col_image = db.Column(db.String(255), nullable=True)
    collection = db.relationship('Collection', backref='collection_tables')
    col_name = db.Column(db.String(255))  # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
@app.route('/collection_table')
def collection_table():
    collections = CollectionTable.query.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    return render_template('collection_table.html', collections=collections)
@app.route('/index')
@app.route('/')
def index():
    products = NewProduct.query.all()  # <-- –ò–º–µ–Ω–Ω–æ NewProduct
    collections = CollectionTable.query.all()
    return render_template('index.html', products=products, collections=collections)
def index():
    try:
        products = NewProduct.query.order_by(NewProduct.id.desc()).limit(5).all()  # –ü–æ–ª—É—á–∞–µ–º 5 —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö NewProduct
        if not products:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π
            message = "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            message = None  # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å, –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    except Exception as e:
        message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}"
        products = []  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    return render_template('index.html', products=products)
@app.route('/about')
def about():
    return render_template('about.html')
@app.route('/catalog')
def catalog():
    name = request.args.get('name')
    category_name = request.args.get('category')
    search_query = request.args.get('search')
    query_product = Product.query
    if category_name:
        query_product = query_product.join(Product.categories).filter(Category.name == category_name)
    if name:
        query_product = query_product.filter(Product.name == name)
    if search_query:
        query_product = query_product.filter(
            or_(
                Product.name.ilike(f"%{search_query}%"),
                Product.description.ilike(f"%{search_query}%")
            )
        )
    products = query_product.all()
    return render_template('catalog.html', products=products, product_type='catalog')
@app.route('/new')
def new():
    try:
        products = NewProduct.query.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö NewProduct
        if not products:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π
            message = "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            message = None  # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å, –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    except Exception as e:
        message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}"
        products = []  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    return render_template('new.html', products=products, message=message)
@app.route('/sale')
def sale():
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö sale_percentage –±–æ–ª—å—à–µ 0
        products_on_sale = Product.query.filter(Product.sale > 0).all()
        if not products_on_sale:
            message = "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π."
        else:
            message = None
    except Exception as e:
        message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}"
        products_on_sale = []  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    return render_template('sale.html', products=products_on_sale, message=message)
@app.route('/product/<int:product_id>')
def product_detail(product_id):
    product_type = request.args.get('product_type')  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ (product –∏–ª–∏ new_product)
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏—â–µ–º —Ç–æ–≤–∞—Ä
    if product_type == 'new_product':
        product = NewProduct.query.get_or_404(product_id)
        details = ProductDetails.query.filter_by(new_product_id=product.id).first()
    else:
        product = Product.query.get_or_404(product_id)
        details = ProductDetails.query.filter_by(product_id=product.id).first()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
    if not product:
        return "Product not found", 404
    return render_template('product_detail.html', product=product, details=details)
@app.route('/client')
def client():
    return render_template('client.html')
@app.route('/cart')
def cart():
    # –ü–æ–ª—É—á–∞–µ–º –∫—É–∫—É —Å –∫–æ—Ä–∑–∏–Ω–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    cart_cookie = request.cookies.get('cart', '{}')
    cart_items = json.loads(cart_cookie)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
    total_price = sum(item['price'] * item['quantity'] for item in cart_items.values())
    return render_template('cart.html', cart=cart_items, total_price=total_price)
@app.route('/add_to_cart/<int:product_id>')
def add_to_cart(product_id):
    product = Product.query.get_or_404(product_id)
    # –ü–æ–ª—É—á–∞–µ–º –∫—É–∫—É —Å –∫–æ—Ä–∑–∏–Ω–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    cart_cookie = request.cookies.get('cart', '{}')
    cart_items = json.loads(cart_cookie)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if str(product_id) in cart_items:
        cart_items[str(product_id)]['quantity'] += 1
    else:
        cart_items[str(product_id)] = {
            'name': product.name,
            'description': product.description,
            'price': product.price,
            'quantity': 1,
            'image_url': product.image_url
        }
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –≤ –∫—É–∫–∏ (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 7 –¥–Ω–µ–π)
    resp = make_response(redirect(url_for('cart')))
    resp.set_cookie('cart', json.dumps(cart_items), max_age=365*24*60*60)  # –ö—É–∫–∞ –Ω–∞ 365 –¥–Ω–µ–π
    return resp
@app.route('/remove_from_cart/<product_id>')
def remove_from_cart(product_id):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º product_id –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        product_id = int(product_id)
    except ValueError:
        return "Invalid product ID", 400  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    # –ü–æ–ª—É—á–∞–µ–º –∫—É–∫—É —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    cart_cookie = request.cookies.get('cart', '{}')
    cart_items = json.loads(cart_cookie)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å
    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if str(product_id) in cart_items:
        del cart_items[str(product_id)]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –≤ –∫—É–∫–∏
    resp = make_response(redirect(url_for('cart')))
    resp.set_cookie('cart', json.dumps(cart_items), max_age=365*24*60*60)  # –ö—É–∫–∞ –Ω–∞ 365 –¥–Ω–µ–π
    return resp
def get_cart_item_count():
    cart_cookie = request.cookies.get('cart', '{}')
    cart_items = json.loads(cart_cookie)
    return sum(item['quantity'] for item in cart_items.values())
@app.context_processor
def inject_cart_item_count():
    try:
        count = get_cart_item_count()
    except Exception:
        count = 0
    return dict(cart_item_count=count)
if __name__ == "__main__":
    with app.app_context():
        db.create_all()  # –°–æ–∑–¥–∞—ë–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    app.run(debug=True)